# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# Déclencheur
# Spécifie que le pipeline s'exécute automatiquement lorsqu'il y a un changement sur la branche "master".
trigger:
- master

# Pool d'agents
# Définit le pool d'agents à utiliser pour exécuter le pipeline.
pool:  "default"


variables:
- name: CloudInitContent

  


steps:
- task: PowerShell@2  # Étape 1 : Encodage du fichier Cloud-init
  inputs:
    targetType: 'inline'
    script: |
        $cloudContent = Get-Content -Path  .\AzureResourceGroupTP1\Cloud-init.txt -Raw
        Write-Host $CloudContent
        $encodedContent = [Convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($CloudContent))
        Write-Host $encodedContent
        Write-Host "##vso[task.setvariable variable=CloudInitContent;]$encodedContent"


- task: AzureResourceManagerTemplateDeployment@3  # Étape 2 : Déploiement d'un Key Vault
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(1)(2ca40756-e319-40dd-84a5-ca8148b8ed59)'
    subscriptionId: '2ca40756-e319-40dd-84a5-ca8148b8ed59'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'tpKey'
    location: 'Canada Central'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\AzureKeyVaultManager\AzureKeyVaultManager\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\AzureKeyVaultManager\AzureKeyVaultManager\azuredeploy.parameters.json'
    overrideParameters: '-name TPDeploiement -secretName adminPass -secretValue $(adminPass)'
    deploymentMode: 'Incremental'
    deploymentOutputs: 'KeyVaultDeployment'

- task: AzureKeyVault@2  # Étape 3 : Lecture des secrets du Key Vault
  name: AzureKey
  inputs:
    azureSubscription: 'Azure subscription 1(1)(2ca40756-e319-40dd-84a5-ca8148b8ed59)'
    KeyVaultName: 'TPDeploiement'
    SecretsFilter: 'AdminPass'
    RunAsPreJob: false
- script: |  # Étape 4 : Vérification du contenu encodé
    echo $(CloudInitContent)
    
- task: AzureResourceManagerTemplateDeployment@3  # Étape 5 : Validation du déploiement ARM avec Cloud-init
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(1)(2ca40756-e319-40dd-84a5-ca8148b8ed59)'
    subscriptionId: '2ca40756-e319-40dd-84a5-ca8148b8ed59'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'TP1_Deploiement'
    location: 'Canada Central'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\AzureResourceGroupTP1\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\AzureResourceGroupTP1\azuredeploy.parameters.json'
    overrideParameters: '-customData $(CloudInitContent) -adminPassword $(AzureKey.AdminPass)'
    deploymentMode: 'Validation'
    
- task: AzureResourceManagerTemplateDeployment@3   # Étape 6 : Déploiement final avec Cloud-init et paramètres
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'Azure subscription 1(1)(2ca40756-e319-40dd-84a5-ca8148b8ed59)'
    subscriptionId: '2ca40756-e319-40dd-84a5-ca8148b8ed59'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'TP1_Deploiement'
    location: 'Canada Central'
    templateLocation: 'Linked artifact'
    csmFile: '$(Build.SourcesDirectory)\AzureResourceGroupTP1\azuredeploy.json'
    csmParametersFile: '$(Build.SourcesDirectory)\AzureResourceGroupTP1\azuredeploy.parameters.json'
    overrideParameters: '-customData $(CloudInitContent) -adminPassword $(AzureKey.AdminPass)'
    deploymentMode: 'Incremental'

